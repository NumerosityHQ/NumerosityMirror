 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Application.java ==== 
 
package org.vaadin.numerosity;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.vaadin.flow.component.page.AppShellConfigurator;
import com.vaadin.flow.server.PWA;
import com.vaadin.flow.theme.Theme;

/**
 * The entry point of the Spring Boot application.
 *
 * Use the @PWA annotation make the application installable on phones, tablets
 * and some desktop browsers.
 *
 */
@SpringBootApplication
@PWA(name = "Project Base for Vaadin with Spring", shortName = "Project Base")
@Theme(variant="Lumo.dark")
public class Application implements AppShellConfigurator {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\ButtonInteraction.java ==== 
 
package org.vaadin.numerosity;

import java.io.Serializable;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.vaadin.numerosity.Subsystems.DatabaseHandler;
import org.vaadin.numerosity.Subsystems.QuestionContentLoader;
import org.vaadin.numerosity.repository.UserRepository;

@Service
public class ButtonInteraction implements Serializable {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private DatabaseHandler dbHandler;

    @Autowired
    private QuestionContentLoader questionContentLoader;

    public String greet(String name) throws Exception {
        dbHandler.createUserDocument(name, name);
        return questionContentLoader.loadAsText();
    }

    public void incrementAction() throws Exception {
        dbHandler.incrementCorrect();
    }

    public void decrementAction() throws Exception {
        dbHandler.incrementWrong();
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\MainView.java ==== 
 
// MainView.java
package org.vaadin.numerosity;

import org.springframework.beans.factory.annotation.Autowired;

import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.Route;

@Route("")
public class MainView extends VerticalLayout {

    @Autowired
    private ButtonInteraction buttonInteraction;

    public MainView() {
        TextField nameField = new TextField("Text");
        // Existing button
        Button sayHelloButton = new Button("Click:", event -> {
            try {
                String name = nameField.getValue();
                if (name == null || name.trim().isEmpty()) {
                    Notification.show("Please enter text");
                    return;
                }
                String greeting = buttonInteraction.greet(name);
                Notification.show(greeting);
            } catch (Exception e) {
                Notification.show("An error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        });

        // New button calling another method
        Button incrementAction = new Button("Increment score", event -> {
            try {
                String response = "Score incremented";
                buttonInteraction.incrementAction();
                Notification.show(response);
            } catch (Exception e) {
                Notification.show("An error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        });

        // New button calling another method
        Button decrementAction = new Button("Decrement score", event -> {
            try {
                String response = "Score decremented";
                buttonInteraction.decrementAction();
                Notification.show(response);
            } catch (Exception e) {
                Notification.show("An error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        });
        add(nameField, sayHelloButton, decrementAction, incrementAction);
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\config\ApplicationConfig.java ==== 
 
package org.vaadin.numerosity.config;


import java.io.IOException;
import java.io.InputStream;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.vaadin.numerosity.repository.FsUserRepository;
import org.vaadin.numerosity.repository.UserRepository;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.FirestoreOptions;


@Configuration
@EnableWebMvc
public class ApplicationConfig {

    @Value("${firebase.project.id}")
    private String projectId;

    @Value("${firebase.credentials.path}")
    private String credentialsPath;


    @Bean
    public Firestore getFirestore() {
        try {

        InputStream inStream = this.getClass().getClassLoader().getResourceAsStream(credentialsPath);    
        GoogleCredentials credentials = GoogleCredentials.fromStream(inStream);
        FirestoreOptions firestoreOptions = FirestoreOptions.getDefaultInstance().toBuilder()
                .setProjectId(projectId)
                .setCredentials(credentials)
                .build();
        return firestoreOptions.getService();
        } catch (IOException e) {
            throw new RuntimeException("Exception while initializing Firestore", e);
        }
    }

    @Bean
    public UserRepository userRepository(Firestore firestore) {
        return new FsUserRepository(firestore);
    }

}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Featureset\MathEngine\AlgebraOne.java ==== 
 
package org.vaadin.numerosity.Featureset.MathEngine;

public class AlgebraOne {
    public static double solveLinear(double a, double b) {
        return a != 0 ? -b / a : Double.NaN;
    }

    public static double evaluateQuadratic(double a, double b, double c, double x) {
        return a * Math.pow(x, 2) + b * x + c;
    }

    public static double findSlope(double x1, double y1, double x2, double y2) {
        return (y2 - y1) / (x2 - x1);
    }
}






 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Featureset\MathEngine\AlgebraTwo.java ==== 
 
package org.vaadin.numerosity.Featureset.MathEngine;

public class AlgebraTwo {
    public static double[] solveQuadratic(double a, double b, double c) {
        double discriminant = Math.pow(b, 2) - 4 * a * c;
        if (discriminant < 0) return new double[] {};
        double root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
        double root2 = (-b - Math.sqrt(discriminant)) / (2 * a);
        return new double[] { root1, root2 };
    }

    public static double evaluateExponential(double base, double exponent) {
        return Math.pow(base, exponent);
    }

    public static double logBaseN(double value, double base) {
        return Math.log(value) / Math.log(base);
    }
} 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Featureset\MathEngine\Calculus.java ==== 
 
package org.vaadin.numerosity.Featureset.MathEngine;

public class Calculus {
    public static double derivativeAtPoint(double a, double b, double c, double x) {
        return 2 * a * x + b;
    }

    public static double definiteIntegral(double a, double b, double c, double lower, double upper) {
        return (a / 3 * Math.pow(upper, 3) + b / 2 * Math.pow(upper, 2) + c * upper) - 
               (a / 3 * Math.pow(lower, 3) + b / 2 * Math.pow(lower, 2) + c * lower);
    }

    public static double limitApproaching(double a, double b, double c, double x) {
        return a * Math.pow(x, 2) + b * x + c;
    }
} 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Featureset\MathEngine\Geometry.java ==== 
 
package org.vaadin.numerosity.Featureset.MathEngine;

public class Geometry {
    public static double areaOfTriangle(double base, double height) {
        return 0.5 * base * height;
    }

    public static double circumferenceOfCircle(double radius) {
        return 2 * Math.PI * radius;
    }

    public static double distanceBetweenPoints(double x1, double y1, double x2, double y2) {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Featureset\MathEngine\Precalculus.java ==== 
 
package org.vaadin.numerosity.Featureset.MathEngine;

public class Precalculus {
    public static double sine(double angle) {
        return Math.sin(Math.toRadians(angle));
    }

    public static double cosine(double angle) {
        return Math.cos(Math.toRadians(angle));
    }

    public static double tangent(double angle) {
        return Math.tan(Math.toRadians(angle));
    }

    public static double factorial(int n) {
        if (n <= 1) return 1;
        return n * factorial(n - 1);
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\repository\FsUserRepository.java ==== 
 
package org.vaadin.numerosity.repository;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ExecutionException;

import org.vaadin.numerosity.repository.exception.DbException;

import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.FieldValue;
import com.google.cloud.firestore.Firestore;

public class FsUserRepository implements UserRepository {

    private final Firestore firestore;

    public FsUserRepository(Firestore firestoneClient) { // was Firestore firestoneClient
        this.firestore = firestoneClient;
    }

    @Override
    public void createUserDocument(String userId, String username) {
        DocumentReference docRef = firestore.collection("users").document(userId);
        Map<String, Object> userData = new HashMap<>();
        userData.put("username", username);
        userData.put("created_at", new Date());
        userData.put("correct", 0);
        userData.put("wrong", 0);
        userData.put("answered", 0);
        userData.put("unattempted", 0);
        try {
         docRef.set(userData).get();
        }  catch (InterruptedException | ExecutionException e) {
            throw new DbException("Exception while creating user", e);
        }
    }


    @Override
    public void incrementCorrect(String userId) {
        updateStatistic(userId, "correct", 1);

    }

    @Override
    public void incrementWrong(String userId) {
        updateStatistic(userId, "wrong", 1);
    }


    
    private void updateStatistic(String userId, String field, int delta) {
        DocumentReference docRef = firestore.collection("users").document(userId);
        Map<String, Object> updates = new HashMap<>();
        updates.put(field, FieldValue.increment(delta));
        try {
             docRef.update(updates).get();
        }  catch (InterruptedException | ExecutionException e) {
            throw new DbException("Exception while updating statistic ", e);
        }
    }

    @Override
    public Optional<Map<String, Object>> getUserStats(String userId) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'getUserStats'");
    }

    @Override
    public boolean userExists(String userId) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'userExists'");
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\repository\UserRepository.java ==== 
 
package org.vaadin.numerosity.repository;

import java.util.Optional;
import java.util.Map;

public interface UserRepository {

    void createUserDocument(String userId, String username);

    void incrementCorrect(String userId);

    void incrementWrong(String userId);

    // New methods for REST API
    Optional<Map<String, Object>> getUserStats(String userId);

    boolean userExists(String userId);
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\repository\exception\DbException.java ==== 
 
package org.vaadin.numerosity.repository.exception;

public class DbException extends RuntimeException {

    public DbException(String message, Throwable cause) {
        super(message, cause);    
    }

}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\rest\QuestionRestController.java ==== 
 
package org.vaadin.numerosity.rest;

import org.springframework.web.bind.annotation.*;
// Other imports

@RestController
@RequestMapping("/api/questions")
public class QuestionRestController {
    // REST endpoints for question operations
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\rest\UserDTO.java ==== 
 
package org.vaadin.numerosity.rest;

public class UserDTO {

    private String userId;
    private String username;
    // Other relevant user data (e.g., email, password - use with caution)

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // Getters and setters for other fields
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\rest\UserRestController.java ==== 
 
package org.vaadin.numerosity.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.vaadin.numerosity.service.UserService;

@RestController
@RequestMapping("/api/users")
public class UserRestController {
    private final UserService userService;

    @Autowired
    public UserRestController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    public ResponseEntity<String> createUser(@RequestBody UserDTO userDTO) {
            return null;
        // Implementation
    }

    // Additional endpoints for user operations
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\service\UserService.java ==== 
 
package org.vaadin.numerosity.service;

import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.vaadin.numerosity.repository.UserRepository;

@Service
public class UserService {
    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public void createUser(String userId, String username) {
        userRepository.createUserDocument(userId, username);
    }

    // Additional methods for user operations
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\DatabaseHandler.java ==== 
 
package org.vaadin.numerosity.Subsystems;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.FieldValue;
import com.google.cloud.firestore.Firestore;

@Service
public class DatabaseHandler {

    private static final Logger logger = LoggerFactory.getLogger(DatabaseHandler.class);
    private final Firestore firestore;
    private String userId;  // Consider making this method scoped if not needed as class member
    private String username; // Consider making this method scoped if not needed as class member

    public DatabaseHandler(Firestore firestore) {
        this.firestore = firestore;
    }

    public void createUserDocument(String userId, String username) throws ExecutionException, InterruptedException {
        if (userId == null || userId.trim().isEmpty()) {
            logger.error("User ID cannot be null or empty.");
            throw new IllegalArgumentException("User ID cannot be null or empty.");  // Or handle differently
        }
        if (username == null || username.trim().isEmpty()) {
            logger.error("Username cannot be null or empty.");
            throw new IllegalArgumentException("Username cannot be null or empty.");  // Or handle differently
        }
        this.userId = userId;
        this.username = username;

        DocumentReference docRef = firestore.collection("users").document(userId);
        Map<String, Object> userData = new HashMap<>();  // Specify type parameters
        userData.put("username", username);
        userData.put("created_at", new Date());
        userData.put("correct", 0);
        userData.put("wrong", 0);
        userData.put("answered", 0);
        userData.put("unattempted", 0);

        docRef.set(userData).get();
    }

    public void updateStatistic(String userId, String field, int delta)
            throws ExecutionException, InterruptedException {
        DocumentReference docRef = firestore.collection("users").document(userId);
        Map<String, Object> updates = new HashMap<>();  // Specify type parameters
        updates.put(field, FieldValue.increment(delta));
        docRef.update(updates).get();
    }

    public void incrementCorrect() {
        try {
            updateStatistic(userId, "correct", 1);
        } catch (ExecutionException | InterruptedException e) {
            logger.error("Error incrementing correct count:", e);
        }
    }

    public void incrementWrong() {
        try {
            updateStatistic(userId, "wrong", 1);
        } catch (ExecutionException | InterruptedException e) {
            logger.error("Error incrementing wrong count:", e);
        }
    }

    // return the explanation fielf from the question
    public String getExplanation(String questionId) throws ExecutionException, InterruptedException {
        DocumentReference docRef = firestore.collection("questions").document(questionId);
        Map<String, Object> questionData = docRef.get().get().getData();
        return questionData.get("explanation").toString();
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\DataPlotter.java ==== 
 
package org.vaadin.numerosity.Subsystems;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;

// Plot data points for each user
// For each question answered, there should be a new plot with time taken to solve, correct or wrong, what question ID it was, and when it was solved
// Sample json file in 'test' dir and 'database/dataplots' dir
@Service
public class DataPlotter {

    private static final Logger logger = LoggerFactory.getLogger(DataPlotter.class);
    private static final String PLOT_DIR = "database/dataplots";
    private final Gson gson = new Gson();

    public DataPlotter() {
        // Ensure the plot directory exists
        Path plotDirPath = Paths.get(PLOT_DIR);
        if (!Files.exists(plotDirPath)) {
            try {
                Files.createDirectories(plotDirPath);
                logger.info("Created data plot directory: {}", PLOT_DIR);
            } catch (IOException e) {
                logger.error("Failed to create data plot directory {}: {}", PLOT_DIR, e.getMessage(), e);
            }
        }
    }

    public void plotData(String userId, String questionId, boolean correct, long timeTakenMillis, String difficulty, String questionTag) {
        try {
            Map<String, Object> plotData = createPlotData(userId, questionId, correct, timeTakenMillis, difficulty, questionTag);
            savePlotData(plotData);
        } catch (IOException e) {
            logger.error("Failed to plot data for user {} and question {}: {}", userId, questionId, e.getMessage(), e);
        }
    }

    private Map<String, Object> createPlotData(String userId, String questionId, boolean correct, long timeTakenMillis, String difficulty, String questionTag) {
        Map<String, Object> data = new HashMap<>();
        data.put("user_id", userId);
        data.put("id", questionId);
        data.put("correct", correct);
        data.put("time", timeTakenMillis);
        data.put("difficulty", difficulty);
        data.put("question_tag", questionTag);

        // Format the current timestamp
        Instant now = Instant.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'")
        .withZone(ZoneId.of("UTC"));
        String timestamp = formatter.format(now);

        data.put("answered_at", timestamp);
        data.put("updated_at", timestamp);
        return data;
    }

    private void savePlotData(Map<String, Object> plotData) throws IOException {
        String userId = (String) plotData.get("user_id");
        String questionId = (String) plotData.get("id");
        if (userId == null || userId.isEmpty() || questionId == null || questionId.isEmpty()) {
            logger.warn("User ID or Question ID is missing. Cannot save plot data.");
            return;
        }

        // Create a unique filename for each plot
        String filename = String.format("%s_%s_%s.json", userId, questionId, Instant.now().toEpochMilli());
        Path filePath = Paths.get(PLOT_DIR, filename).toAbsolutePath();

        try {
            String jsonData = gson.toJson(plotData);
            Files.write(filePath, jsonData.getBytes());
            logger.info("Saved plot data to: {}", filePath);
        } catch (IOException e) {
            logger.error("Failed to save plot data to {}: {}", filePath, e.getMessage(), e);
            throw e; // Re-throw the exception after logging
        }
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\FirebaseHandler.java ==== 
 
package org.vaadin.numerosity.Subsystems;

import java.io.FileInputStream;
import java.io.IOException;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;

public class FirebaseHandler {
    private String databaseUrl;
    private String pathToKey;

    public FirebaseHandler(String databaseUrl) {
        this.databaseUrl = databaseUrl;
    }

    public void initialize() throws IOException {
        FileInputStream serviceAccount = new FileInputStream(pathToKey); // Use pathToKey
        FirebaseOptions options = FirebaseOptions.builder()
                .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                .setDatabaseUrl(databaseUrl)
                .build();
        FirebaseApp.initializeApp(options);
    }

    public void setPathToKey(String pathToKey) {
        this.pathToKey = pathToKey;
    }

    // No longer need to setDatabaseURL
}

/*
 * 
 * To use firebase featureset in code:
 * import com.google.firebase.auth.FirebaseAuth;
 * import com.google.firebase.auth.UserRecord;
 * 
 * UserRecord.CreateRequest request = new UserRecord.CreateRequest()
 * .setEmail("user@example.com")
 * .setPassword("secretPassword");
 * UserRecord userRecord = FirebaseAuth.getInstance().createUser(request);
 * System.out.println("Successfully created new user: " + userRecord.getUid());
 * 
 */ 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\FirestoneClient.java ==== 
 
package org.vaadin.numerosity.Subsystems;

import java.io.FileInputStream;
import java.io.IOException;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.FirestoreOptions;

/*
 * public class FirestoreClient { // Renamed class
    private static Firestore firestoreInstance;

    public static synchronized void initialize(String projectId, String credentialsPath) throws IOException {
        if (firestoreInstance != null) return;
        // Rest of the code remains the same
    }
}

 */
public class FirestoneClient {

    private static Firestore firestoreInstance;

    /**
     * Initializes the Firestore client with the given project ID and credentials file.
     *
     * @param projectId The Google Cloud project ID.
     * @param credentialsPath The path to the service account key JSON file.
     * @throws IOException If there is an issue reading the credentials file.
     */
    public static synchronized void initialize(String projectId, String credentialsPath) throws IOException {
        if (firestoreInstance != null) return;
        if (firestoreInstance == null) {
            FileInputStream serviceAccount = new FileInputStream(credentialsPath);

            FirestoreOptions firestoreOptions = FirestoreOptions.getDefaultInstance().toBuilder()
                    .setProjectId(projectId)
                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                    .build();

            firestoreInstance = firestoreOptions.getService();
        }
    }

    /**
     * Returns the initialized Firestore instance.
     *
     * @return The Firestore instance.
     * @throws IllegalStateException If the client has not been initialized.
     */
    public static Firestore getFirestore() {
        if (firestoreInstance == null) {
            throw new IllegalStateException("FirestoreClient has not been initialized. Call initialize() first.");
        }
        return firestoreInstance;
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\LocalDatabaseHandler.java ==== 
 
// LocalDatabaseHandler.java
package org.vaadin.numerosity.Subsystems;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.Random;

import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

@Service
public class LocalDatabaseHandler {

    private final Gson gson = new Gson();
    // private final QuestionLoader questionLoader;
    // String directory = "Database/Bank/AlgebraOne/Easy";
    // String questionId = "q1"; //No need for this here

    private final String AlgebraOneEasy = "Database/Bank/AlgebraOne/Easy";
    private final String AlgebraOneMedium = "Database/Bank/AlgebraOne/Medium";
    private final String AlgebraOneHard = "Database/Bank/AlgebraOne/Hard";
    private final String AlgebraTwoEasy = "Database/Bank/AlgebraTwo/Easy";
    private final String AlgebraTwoMedium = "Database/Bank/AlgebraTwo/Medium";
    private final String AlgebraTwoHard = "Database/Bank/AlgebraTwo/Hard";
    private final String GeometryEasy = "Database/Bank/Geometry/Easy";
    private final String GeometryMedium = "Database/Bank/Geometry/Medium";
    private final String GeometryHard = "Database/Bank/Geometry/Hard";
    private final String PrecalculusEasy = "Database/Bank/Precalculus/Easy";
    private final String PrecalculusMedium = "Database/Bank/Precalculus/Medium";
    private final String PrecalculusHard = "Database/Bank/Precalculus/Hard";
    private final String CalculusEasy = "Database/Bank/Calculus/Easy";
    private final String CalculusMedium = "Database/Bank/Calculus/Medium";
    private final String CalculusHard = "Database/Bank/Calculus/Hard";
    private final String DailyEasy = "Database/Bank/Daily/Easy";
    private final String DailyMedium = "Database/Bank/Daily/Medium";
    private final String DailyHard = "Database/Bank/Daily/Hard";
    private final String DailyChallenge = "Database/Bank/Daily/Challenge";

    private String directory = AlgebraOneEasy; // temporary solution to choose directory. Make this configurable later

    private final String[] directories = { AlgebraOneEasy, AlgebraOneMedium, AlgebraOneHard, AlgebraTwoEasy,
            AlgebraTwoMedium,
            AlgebraTwoHard, GeometryEasy, GeometryMedium, GeometryHard, PrecalculusEasy, PrecalculusMedium,
            PrecalculusHard, CalculusEasy, CalculusMedium, CalculusHard, DailyEasy, DailyMedium, DailyHard,
            DailyChallenge };

    private final String[] questions = { "q1", "q2", "q3" }; // Ideally read these from the directory

    // No longer needs LocalDatabaseHandler
    // @Autowired //Not needed now
    // public QuestionLoader(LocalDatabaseHandler localDb) {
    // this.localDb = localDb;
    // }

    // These loadAsText and loadAsLatex were moved to a more appropriate class

    // load random question from the database with the known paths
    public String getRandomDirectory() {
        Random random = new Random();
        int randomIndex = random.nextInt(directories.length);
        return directories[randomIndex];
    }

    // load random question
    public String getRandomQuestion() {
        Random random = new Random();
        int randomIndex = random.nextInt(questions.length);
        return questions[randomIndex];
    }

    public String getDirectory() {
        return directory;
    }

    public void saveQuestion(String questionId, Map<String, Object> questionData) throws Exception {
        String directory = getDirectory(); // Use the getter
        Path dirPath = Paths.get(directory);

        if (!Files.exists(dirPath)) {
            Files.createDirectories(dirPath);
        }

        Path path = dirPath.resolve(questionId + ".json");
        Files.write(path, gson.toJson(questionData).getBytes());
    }

    public Map<String, Object> loadRandomQuestion() throws Exception {
        String directory = getRandomDirectory();
        String questionId = getRandomQuestion();
        Path path = Paths.get(directory, questionId + ".json");

        if (!Files.exists(path)) {
            throw new IOException("Question file not found: " + path);
        }

        String content = new String(Files.readAllBytes(path));
        return gson.fromJson(content, new TypeToken<Map<String, Object>>() {
        }.getType());
    }

    // the directory refers to the level of the question as defined above
    public Map<String, Object> loadSpecificQuestion(String questionId, String directory) throws Exception {
        Path path = Paths.get(directory, questionId + ".json");

        if (!Files.exists(path)) {
            throw new IOException("Question file not found: " + path);
        }

        String content = new String(Files.readAllBytes(path));
        return gson.fromJson(content, new TypeToken<Map<String, Object>>() {
        }.getType());
    }

    // load random question with specific directory or level
    // question id should be random but the directory should be specified
    public Map<String, Object> loadRandomQuestionByLevel(String directory) throws Exception {
        String questionId = getRandomQuestion();
        return loadSpecificQuestion(questionId, directory);
    }

    // set directory form user input
    public void setDirectory(String directory) {
        this.directory = directory;
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\LoginHandler.java ==== 
 
package org.vaadin.numerosity.Subsystems;

public class LoginHandler {
    
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\QuestionContentLoader.java ==== 
 
//  A class is needed to appropriately load text or latex content from questions
//  Create a new class to do this in:
package org.vaadin.numerosity.Subsystems;

import org.springframework.stereotype.Service;

import java.util.Map;

@Service
public class QuestionContentLoader {

    private final LocalDatabaseHandler localDbHandler;

    public QuestionContentLoader(LocalDatabaseHandler localDbHandler) {
        this.localDbHandler = localDbHandler;
    }

    public String loadAsText() throws Exception {
        Map<String, Object> question = localDbHandler.loadRandomQuestion();
        if (!question.containsKey("text")) {
            throw new IllegalArgumentException("Question has no 'text' field");
        }
        return question.get("text").toString();
    }

    public String loadAsLatex() throws Exception {
        Map<String, Object> question = localDbHandler.loadRandomQuestion();
        if (!question.containsKey("latex")) {
            throw new IllegalArgumentException("Question has no 'latex' field");
        }
        return question.get("latex").toString();
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\ResponseHandler.java ==== 
 
// ResponseHandler.java  (Adjust constructor)
package org.vaadin.numerosity.Subsystems;

import java.time.Duration;
import java.time.Instant;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResponseHandler {

    private static final Logger logger = LoggerFactory.getLogger(ResponseHandler.class);
    private final LocalDatabaseHandler localDbHandler;
    private final DatabaseHandler dbHandler;
    private final DataPlotter dataPlotter;
    private String userId;
    private String questionId;

    public ResponseHandler(LocalDatabaseHandler localDbHandler, DatabaseHandler dbHandler, DataPlotter dataPlotter) {
        this.localDbHandler = localDbHandler;
        this.dbHandler = dbHandler;
        this.dataPlotter = dataPlotter;
    }

    public ResponseResult handleResponse(String questionId, String userAnswer) {
        Instant startTime = Instant.now();
        boolean isCorrect = validateAnswer(questionId, userAnswer);
        Instant endTime = Instant.now();
        long timeTakenMillis = Duration.between(startTime, endTime).toMillis();

        // Update statistics in Firestore
        if (isCorrect) {
            dbHandler.incrementCorrect();
        } else {
            dbHandler.incrementWrong();
        }

        return new ResponseResult(isCorrect, timeTakenMillis);
    }

    private boolean validateAnswer(String questionId, String userAnswer) {
        try {
            Map<String, Object> question = localDbHandler.loadRandomQuestion();  //Specify type
            if (question != null && question.containsKey("answer")) {
                String correctAnswer = question.get("answer").toString();
                return correctAnswer.trim().equalsIgnoreCase(userAnswer.trim()); // Trim to avoid whitespace issues
            } else {
                logger.warn("Question {} does not have a valid answer field.", questionId);
                return false; // Or throw an exception, depending on desired behavior
            }
        } catch (Exception e) {
            logger.error("Error validating answer for question {}: {}", questionId, e.getMessage(), e);
            return false; // Or throw an exception
        }
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public void setQuestionId(String questionId) {
        this.questionId = questionId;
    }

    //Inner class for encapsulation
    public static class ResponseResult {
        private final boolean isCorrect;
        private final long timeTakenMillis;

        public ResponseResult(boolean isCorrect, long timeTakenMillis) {
            this.isCorrect = isCorrect;
            this.timeTakenMillis = timeTakenMillis;
        }

        public boolean isCorrect() {
            return isCorrect;
        }

        public long getTimeTakenMillis() {
            return timeTakenMillis;
        }
    }
}
 
====================== 
 
==== File: C:\Git\Numerosity\server\src\main\java\org\vaadin\numerosity\Subsystems\UserHandler.java ==== 
 
package org.vaadin.numerosity.Subsystems;

import java.util.concurrent.ExecutionException;
// import org.vaadin.numerosity.Subsystems.QuestionLoader;

// create user, delete user, update user, get user and everything user related (web interferace sign up calls this)
public class UserHandler {
    DatabaseHandler db = new DatabaseHandler(FirestoneClient.getFirestore());

    public void createUser(String username) {
        try {
            db.createUserDocument(username, username);
        } catch (ExecutionException | InterruptedException e) {
            System.out.println("User creation failed");
        }
    }
}
 
====================== 
 
